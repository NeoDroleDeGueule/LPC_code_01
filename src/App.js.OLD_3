import React, { useState } from 'react';
import { Button, TextField, TextareaAutosize, Container, Typography, Box } from '@mui/material';

const fetchPhoneticTranscription = async (text) => {
  console.log(`Fetching phonetic transcription for: ${text}`);
  const response = await fetch(`http://localhost:5000/api/phonetic?text=${text}`);
  console.log(`Response status: ${response.status}`);
  const data = await response.json();
  console.log(`Response data: ${data}`);
  return data;
};

const transcribeToPairs = (phoneticText) => {
  const phonemes = phoneticText.split(/(\s+)/).filter(Boolean); // Preserve spaces
  const pairs = [];

  for (let i = 0; i < phonemes.length; i++) {
    const currentPhoneme = phonemes[i];

    if (currentPhoneme.trim() === "") {
      // If it's a space, just add it to the result
      pairs.push(currentPhoneme);
      continue;
    }

    const isConsonant = /[bcdɖdfɡhɦħjɟkklmnpɳŋŋqrʁrsʂʃtθʋvwxzʒʔ]/i.test(currentPhoneme);
    const isVowel = /[aeiouyɑɒæɛɪɔʊəɜʌɐaːeːiːoːuːəː]/i.test(currentPhoneme);

    if (isConsonant) {
      if (i + 1 < phonemes.length && /[aeiouyɑɒæɛɪɔʊəɜʌɐaːeːiːoːuːəː]/i.test(phonemes[i + 1])) {
        // Consonne suivie d'une voyelle
        pairs.push(`${currentPhoneme}${phonemes[i + 1]}`);
        i++; // Skip the next phoneme as it's already used
      } else {
        // Consonne suivie d'une autre consonne ou fin de texte
        pairs.push(`${currentPhoneme}_`);
      }
    } else if (isVowel) {
      // Voyelle isolée
      pairs.push(`-${currentPhoneme}`);
    } else {
      // Cas où le phonème n'est ni une consonne ni une voyelle (peut être un symbole ou autre)
      pairs.push(currentPhoneme);
    }
  }

  return pairs.join(' ');
};

const App = () => {
  const [text, setText] = useState('');
  const [phoneticText, setPhoneticText] = useState('');
  const [pairsText, setPairsText] = useState('');

  const handleTranscribe = async () => {
    // Supprimer les caractères de ponctuation
    const cleanedText = text.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, '');
    const phonetic = await fetchPhoneticTranscription(cleanedText);
    if (phonetic) {
      setPhoneticText(phonetic);
      setPairsText(transcribeToPairs(phonetic));
    } else {
      setPhoneticText('');
      setPairsText('');
    }
  };

  return (
    <Container maxWidth="sm">
      <Typography variant="h4" align="center" gutterBottom>
        Application CodeLPC
      </Typography>
      <Box mb={2}>
        <TextField
          label="Texte à saisir"
          value={text}
          onChange={(e) => setText(e.target.value)}
          fullWidth
          variant="outlined"
        />
      </Box>
      <Box display="flex" justifyContent="center" mb={2}>
        <Button onClick={handleTranscribe} variant="contained" color="primary">
          Valider
        </Button>
      </Box>
      <Box mb={2}>
        <Typography variant="h6">Texte transcrit en phonétique :</Typography>
        <TextareaAutosize
          value={phoneticText}
          readOnly
          style={{ width: '100%', border: '1px solid #ccc', padding: '8px' }}
        />
      </Box>
      <Box mb={2}>
        <Typography variant="h6">Texte phonétique transcrit en paire consonne/voyelle :</Typography>
        <TextareaAutosize
          value={pairsText}
          readOnly
          style={{ width: '100%', border: '1px solid #ccc', padding: '8px' }}
        />
      </Box>
    </Container>
  );
};

export default App;
